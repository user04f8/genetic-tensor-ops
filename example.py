import torch

if __name__ == '__main__':
    N, D = 1000, 10
    train_x1 = torch.randn(N, D)
    train_x2 = torch.randn(N, D)
    train_y = 2.0*train_x1 + 0.5*train_x2

    val_x1 = torch.randn(N, D)
    val_x2 = torch.randn(N, D)
    val_y = 2.0*val_x1 + 0.5*val_x2

    train_data = ((train_x1, train_x2), train_y)
    val_data = ((val_x1, val_x2), val_y)

    input_shapes = [train_x1.shape, train_x2.shape]
    output_shape = train_y.shape

    from trainer import Trainer

    trainer = Trainer(input_shapes, output_shape, population_size=20)
    best_model, best_loss = trainer.fit(train_data, val_data, generations=5000, complexity_penalty_factor=0.01)
    print("Best loss:", best_loss)
    print("Best model:", best_model)


"""
Example output:
Best loss: 0.0002887499867938459
Best model: Parameter containing:
tensor([[-1.2452e-03, -1.5188e-03,  4.6281e-03,  ...,  4.8030e-03,
         -6.7065e-03, -1.4880e-02],
        [ 7.5662e-03,  1.4342e-02, -6.3785e-03,  ..., -1.0033e-02,
          1.2055e-03, -8.4302e-03],
        [ 1.1629e-02,  1.9906e-03, -7.8267e-03,  ...,  8.1641e-03,
          4.1147e-03, -3.0174e-04],
        ...,
        [ 5.3428e-03, -1.0517e-02,  7.1497e-03,  ...,  1.2980e-02,
         -7.4388e-04,  3.7594e-03],
        [ 9.3033e-03, -2.2157e-03, -1.9622e-04,  ...,  2.2831e-03,
         -8.5019e-05, -3.8026e-03],
        [ 1.2904e-03,  1.3744e-02,  5.4435e-03,  ...,  7.5183e-02,
          3.2195e-03,  1.3395e-03]])*x2 + x1 + x2 + Parameter containing:
tensor([[-0.0017,  0.0070, -0.0162,  ...,  0.0033, -0.0035, -0.0059],
        [-0.0047, -0.0023, -0.0044,  ..., -0.0017,  0.0016,  0.0007],
        [-0.0013,  0.0026, -0.0109,  ..., -0.0031, -0.0084,  0.0026],
        ...,
        [ 0.0177, -0.0103,  0.0255,  ...,  0.0164,  0.0108,  0.0091],
        [ 0.0196,  0.0020,  0.0158,  ...,  0.0019, -0.0042,  0.0013],
        [-0.0030,  0.0049,  0.0038,  ...,  0.0181,  0.0212,  0.0052]])*Parameter containing:
tensor([[ 6.5085e-04, -1.9527e-03,  5.9817e-03,  ..., -1.6309e-11,
          2.5787e-06,  6.5490e-03],
        [ 3.6079e-03,  1.1739e-03,  2.1690e-03,  ...,  7.7125e-05,
         -1.0602e-03, -4.8840e-04],
        [ 4.0509e-07, -2.0007e-03,  7.0218e-03,  ...,  1.0525e-03,
          7.9729e-04, -5.6884e-04],
        ...,
        [-9.9278e-03,  1.1408e-02, -8.2904e-03,  ..., -1.9931e-06,
         -5.3535e-11, -9.2135e-04],
        [-2.0248e-02, -4.7080e-04, -3.2896e-03,  ..., -1.8535e-03,
          2.7550e-03, -1.3788e-03],
        [ 1.8150e-04, -5.3544e-03, -1.0761e-04,  ...,  5.8637e-05,
         -1.8691e-03, -3.2141e-04]])*Parameter containing:
tensor([[-0.0059,  0.0019, -0.0213,  ..., -0.0167, -0.0004,  0.0065],
        [ 0.0004,  0.0030,  0.0088,  ..., -0.0100,  0.0121,  0.0111],
        [ 0.0074,  0.0088,  0.0209,  ...,  0.0085,  0.0052,  0.0026],
        ...,
        [-0.0234,  0.0044,  0.0054,  ..., -0.0070, -0.0091,  0.0073],
        [ 0.0010,  0.0067,  0.0164,  ...,  0.0135,  0.0013,  0.0073],
        [-0.0009,  0.0013, -0.0063,  ..., -0.0088,  0.0096,  0.0007]])*Parameter containing:
tensor([[-0.0111, -0.0078, -0.0075,  ...,  0.0064, -0.0004,  0.0124],
        [ 0.0006, -0.0048,  0.0091,  ...,  0.0020, -0.0039, -0.0060],
        [ 0.0009,  0.0068,  0.0143,  ..., -0.0023, -0.0029,  0.0041],
        ...,
        [-0.0021,  0.0113, -0.0078,  ..., -0.0012, -0.0056,  0.0102],
        [-0.0131,  0.0023,  0.0032,  ..., -0.0063, -0.0045,  0.0176],
        [ 0.0013,  0.0012, -0.0105,  ...,  0.0480,  0.0045,  0.0042]]) + Parameter containing:
tensor([[ 0.0081,  0.0061,  0.0031,  ..., -0.0016, -0.0062,  0.0061],
        [-0.0022, -0.0102, -0.0002,  ...,  0.0106, -0.0038,  0.0159],
        [-0.0060, -0.0052,  0.0052,  ..., -0.0047,  0.0089, -0.0018],
        ...,
        [-0.0121, -0.0019,  0.0024,  ...,  0.0082,  0.0024, -0.0066],
        [ 0.0132, -0.0067, -0.0078,  ...,  0.0037, -0.0115, -0.0117],
        [-0.0032, -0.0126, -0.0039,  ...,  0.0539, -0.0096,  0.0075]]) + x1 + x2*Parameter containing:
tensor([[0.5030, 0.5014, 0.5012,  ..., 0.4904, 0.5130, 0.4964],
        [0.4922, 0.5019, 0.4962,  ..., 0.4967, 0.5070, 0.4979],
        [0.4936, 0.4966, 0.4891,  ..., 0.5004, 0.4919, 0.5000],
        ...,
        [0.5084, 0.5018, 0.4997,  ..., 0.4797, 0.5039, 0.4908],
        [0.4889, 0.5085, 0.5069,  ..., 0.5011, 0.5166, 0.4982],
        [0.4997, 0.4968, 0.5079,  ..., 0.2168, 0.5019, 0.4858]])
"""